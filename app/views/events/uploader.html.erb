<style type="text/css">
  #holder {
    border: 5px dashed #ccc;
    min-height: 300px;
    margin: 20px auto;
    padding: 5px;
    line-height: 130px;
  }

  #holder.hover {
    border: 10px dashed #0c0;
  }

  #holder_img{
    padding: 10px;
  }

  .dateimg{
    text-align: center;
    border: 1px solid #dddddd;
    padding: 2px;
    height: 140px;
  }

</style>
<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">上传图片</h3>
  </div>
  <div class="panel-body">
    <div id="holder">
      <div id="holder_img" class="row">
      </div>
    </div>
    <p id="upload" class="hidden"><label>Drag &amp; drop not supported, but you can still upload via this input field:<br><input type="file"></label></p>
    <p id="filereader">File API &amp; FileReader API not supported</p>
    <p id="formdata">XHR2's FormData is not supported</p>
    <p id="progress">XHR2's upload progress isn't supported</p>
    <p>上传进度： <progress id="uploadprogress" min="0" max="100" value="0" style="width: 90%">0</progress></p>
    <p>请将图像从您的桌面拖至上传区域，图像将自动上传到服务器</p>
    <div class="row" style="margin: 10px">
      <h4>已上传图片</h4>
      <% @event.photos.each do |photo|%>
        <div class="col-md-2" style="padding:5px">
          <%= image_tag photo.avatar_url(:medium), :class => 'img-thumbnail', size:"118x118"%>
        </div>
      <% end -%>
    </div>
  </div>
</div>
<script>
  // 检查浏览器是否支持拖放上传。
    var holder = document.getElementById('holder'),
    tests = {
      filereader: typeof FileReader != 'undefined',
      dnd: 'draggable' in document.createElement('span'),
      formdata: !!window.FormData,
      progress: "upload" in new XMLHttpRequest
    },
    support = {
      filereader: document.getElementById('filereader'),
      formdata: document.getElementById('formdata'),
      progress: document.getElementById('progress')
    },
    acceptedTypes = {
      'image/png': true,
      'image/jpeg': true,
      'image/jpg': true,
      'image/gif': true
    },
    progress = document.getElementById('uploadprogress'),
    fileupload = document.getElementById('upload');

    "filereader formdata progress".split(' ').forEach(function (api) {
      if (tests[api] === false) {
        support[api].className = 'fail';
      } else {
        support[api].className = 'hidden';
      }
    });

    function previewfile(file) {
      if (tests.filereader === true && acceptedTypes[file.type] === true) {
        var reader = new FileReader();
        reader.onload = function (event) {
          var cloDiv = document.createElement("div");
            cloDiv.className = "col-md-4";
            cloDiv.style = "padding:5px";
          var dateimgDiv = document.createElement("div");
            dateimgDiv.className = "dateimg";

          cloDiv.appendChild(dateimgDiv);

          var image = new Image();
          image.src = event.target.result;
          // image.width = 250; // a fake resize
          image.height = 118;
          dateimgDiv.appendChild(image);

          var holder_img = document.getElementById('holder_img');
          holder_img.appendChild(cloDiv);

        };
        reader.readAsDataURL(file);
      }  else {
        holder.innerHTML += '<p>Uploaded ' + file.name + ' ' + (file.size ? (file.size/1024|0) + 'K' : '');
      }
    }

    function previewfile2(file) {
      var image = new Image();
      image.src = file;
      image.width = 250; // a fake resize
      image.height = 250;
      holder.appendChild(image);
    }

    function callback() {
      //接收响应数据  www.2cto.com
      //判断对象状态是否交互完成，如果为4则交互完成
      if(xhr.readyState == 4) {
           //判断对象状态是否交互成功,如果成功则为200
        if(xhr.status == 200) {
            //接收数据,得到服务器输出的纯文本数据
            var response = $.parseJSON(xhr.responseText);
            previewfile2(response["thumbnail_url"]);
            //得到div的节点将数据显示在div上
            // var divresult = document.getElementById("result");
            // divresult.innerHTML = response;
        }
      }
    }
    function readfiles(files) {
      debugger;
      var formData = tests.formdata ? new FormData() : null;
      var event_id = <%= @event.id %>;
      var user_id = <%= @current_user.id %>;
      formData.append('photo[event_id]', event_id);
      formData.append('user_id', user_id);
      for (var i = 0; i < files.length; i++){
        if (tests.formdata) formData.append('photo[avatar]', files[i]);
        previewfile(files[i]);
        // now post a new XHR request
        if (tests.formdata) {
          xhr = new XMLHttpRequest();
          // xhr.onreadystatechange = callback();
          xhr.open('POST', '/photos');
          xhr.onload = function() {
            progress.value = progress.innerHTML = 100;
          };

          if (tests.progress) {
            xhr.upload.onprogress = function (event) {
              if (event.lengthComputable) {
                var complete = (event.loaded / event.total * 100 | 0);
                progress.value = progress.innerHTML = complete;
              }
            }
          }
          xhr.send(formData)
        }
      }
    }

    if (tests.dnd) {
      holder.ondragover = function () { this.className = 'hover'; return false; };
      holder.ondragend = function () { this.className = ''; return false; };
      holder.ondrop = function (e) {
        this.className = '';
        e.preventDefault();
        readfiles(e.dataTransfer.files);
      }
    } else {
      fileupload.className = 'hidden';
      fileupload.querySelector('input').onchange = function () {
        readfiles(this.files);
      };
    }
</script>